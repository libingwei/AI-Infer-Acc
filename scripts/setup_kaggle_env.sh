#!/usr/bin/env bash
set -euo pipefail

# setup_kaggle_env.sh
# Kaggle Notebook 环境下安装/配置 TensorRT（从你上传的数据集中的 tar 包自动发现）
# 用法：
#   bash scripts/setup_kaggle_env.sh [<tensorrt_tar_path>|<tensorrt_home_dir>]
# 说明：
# - 若不提供参数，脚本会在 /kaggle/input/*/ 下优先查找已解压目录 TensorRT-*/，找不到再查找 TensorRT-*.tar.gz
# - 若传入的是已解压目录（含 include/ 与 lib/），将直接生成环境变量，无需解压
# - 安装目录：/kaggle/working/
# - 导出环境变量文件：/kaggle/working/tensorrt_env.sh（需手动 source 生效）

echo "[setup_kaggle_env] start"

ARG_PATH=${1:-}
DEST_DIR=/kaggle/working
mkdir -p "${DEST_DIR}"

TENSORRT_HOME=""

if [[ -n "${ARG_PATH}" ]]; then
  if [[ -d "${ARG_PATH}" ]]; then
    # 传入的已解压目录
    if [[ -d "${ARG_PATH}/include" && -d "${ARG_PATH}/lib" ]]; then
      TENSORRT_HOME="${ARG_PATH}"
      echo "[setup_kaggle_env] using existing dir as TENSORRT_HOME: ${TENSORRT_HOME}"
    else
      echo "[ERROR] 目录缺少 include/ 或 lib/：${ARG_PATH}"
      exit 1
    fi
  elif [[ -f "${ARG_PATH}" ]]; then
    TAR_PATH="${ARG_PATH}"
  else
    echo "[ERROR] 参数既不是有效文件也不是目录：${ARG_PATH}"
    exit 1
  fi
fi

if [[ -z "${TENSORRT_HOME}" && -z "${TAR_PATH:-}" ]]; then
  # 优先查找已解压目录
  TENSORRT_HOME=$(ls -d /kaggle/input/*/TensorRT-* 2>/dev/null | head -n 1 || true)
  if [[ -n "${TENSORRT_HOME}" && -d "${TENSORRT_HOME}/include" && -d "${TENSORRT_HOME}/lib" ]]; then
    echo "[setup_kaggle_env] found extracted dir: ${TENSORRT_HOME}"
  else
    TENSORRT_HOME=""
  fi
fi

if [[ -z "${TENSORRT_HOME}" && -z "${TAR_PATH:-}" ]]; then
  # 退回查找 tar 包
  TAR_PATH=$(ls /kaggle/input/*/TensorRT-*.tar.gz 2>/dev/null | head -n 1 || true)
fi

if [[ -z "${TENSORRT_HOME}" && -n "${TAR_PATH:-}" ]]; then
  if [[ ! -f "${TAR_PATH}" ]]; then
    echo "[ERROR] 未找到 TensorRT 压缩包：${TAR_PATH}"
    exit 1
  fi
  echo "[setup_kaggle_env] extracting: ${TAR_PATH} -> ${DEST_DIR}"
  tar -xzf "${TAR_PATH}" -C "${DEST_DIR}"
  TOP_DIR=$(tar -tzf "${TAR_PATH}" | head -1 | cut -d/ -f1)
  TENSORRT_HOME="${DEST_DIR}/${TOP_DIR}"
fi

if [[ -z "${TENSORRT_HOME}" ]]; then
  echo "[ERROR] 未找到可用的 TensorRT 目录或压缩包。"
  echo "请上传并挂载数据集，或将已解压目录路径作为参数传入。"
  echo "示例（目录）：bash scripts/setup_kaggle_env.sh /kaggle/input/<ds>/TensorRT-8.6.1.6.Linux.x86_64-gnu.cuda-12.0"
  echo "示例（压缩包）：bash scripts/setup_kaggle_env.sh /kaggle/input/<ds>/TensorRT-8.6.1.6.Linux.x86_64-gnu.cuda-12.0.tar.gz"
  exit 2
fi

if [[ ! -d "${TENSORRT_HOME}" ]]; then
  echo "[ERROR] 目录不存在：${TENSORRT_HOME}"
  exit 2
fi

ENV_FILE="${DEST_DIR}/tensorrt_env.sh"
cat > "${ENV_FILE}" <<EOF
# Auto-generated by setup_kaggle_env.sh
export TENSORRT_HOME=${TENSORRT_HOME}
export LD_LIBRARY_PATH="${TENSORRT_HOME}/lib:">${LD_LIBRARY_PATH:+"$LD_LIBRARY_PATH"}
export PATH="${TENSORRT_HOME}/bin:${PATH}"
EOF

echo "[setup_kaggle_env] wrote env: ${ENV_FILE}"

# 基础校验
if [[ -f "${TENSORRT_HOME}/lib/libnvinfer.so" ]]; then
  echo "[setup_kaggle_env] found: libnvinfer.so"
  strings "${TENSORRT_HOME}/lib/libnvinfer.so" 2>/dev/null | grep -m1 -E "TensorRT Version|InferPlugin" || true
else
  echo "[WARN] 未找到 ${TENSORRT_HOME}/lib/libnvinfer.so，请检查压缩包是否正确"
fi

# 补充 CMake（可用于 C++ 构建；注意 Kaggle 不提供系统级 OpenCV 开发库）
if ! command -v cmake >/dev/null 2>&1; then
  echo "[setup_kaggle_env] installing cmake via pip"
  pip install -q cmake || true
fi

echo "[setup_kaggle_env] done"

cat <<EOM
下一步：
  source ${ENV_FILE}
然后可尝试：
  trtexec --version || echo 'trtexec 可能未包含在该包中'
如需 C++ 构建：
  - include: \"\${TENSORRT_HOME}/include\"
  - libs:    \"\${TENSORRT_HOME}/lib\" （链接 -lnvinfer -lnvonnxparser -lcudart 等）
注意：Kaggle 无法 apt 安装 OpenCV 开发库，依赖 OpenCV 的 C++ 目标可能无法在 Kaggle 构建。
EOM
